/*
	SPACERS - Padronização de preenchimentos ----------------------------------

spacer é utilizado para distanciamento de componentes. Espaçamentos internos de
componente continuam a ser definidos através da propriedade padding nas
definições do próprio componente.

Ex: O seletor "form__field--spacing-top", é perfeito para uso do spacer,
"--spacing-top" não deveria ser especialização, o spacer resolve este problema.

Seria abusivo o uso de spacer para todo tipo de espaçamento. Enfim, spacer é
para distanciamento de componentes diferentes e não partes de um mesmo componente.
Senão estaríamos apenas trocando a propriedade padding por uma classe injetada
no HTML. O objetivo não é esse.

spacer como helper evita especializações de componentes que estariam mais
relacionadas ao contexto no qual o componente foi inserido e não a si próprio.
Não se encaixa no caso de usar um scss de page porque este tipo de ajuste acaba
sendo recorrente em diversos outros componentes daí fica claro que é digno que
se tornar um helper.

Resumindo, padding interno não usa spacer, para distância em relação à outros
componentes, use spacer.

MIXINS:
spacer, spacer-vertical, spacer-horizontal

VALORES:
O arquivo _vars.scss especifica as distâncias permitidas para uso conjunto com
mixins de spacer.

FAQ:
#1 Qual critério para determinar o que é spacer e o que é padding do componente?

	R: O spacer, quando o é, não deve afetar visualmente o componente, se afetar
	poder ser que o spacer está	sendo atribuído no elemento incorreto,
	precisando de um container para recebê-lo. Normalmente o componente é
	acomodado dentro de algum componente wrapper ou coluna ou linha.

*/

/*
	spacer()
	- Gera classes do tipo spacer--md-t20
	- Podem ser especificados top, right, bottom, left
	- As propriedades devem obedecer a ordem top, right, bottom, left
	- Parâmetro $breakpoint é "opcional"

	Exemplo #1:
		.spacer--md-b80
		@include spacer((bottom: $spacer-80), 'md');

	Exemplo #2:
		.spacer--md-t30-r20-b80-l20

		$map: (
			top: $spacer-30,
			right: $spacer-20,
			bottom: $spacer-80,
			left: $spacer-120
		);

		@include spacer($map, 'md');
*/
@mixin spacer($map, $breakpoint: '') {
	@include rule-tokenize($map, 'margin', $breakpoint);
}


/*
	spacer-vertical()
	- Gera classes do tipo spacer--md-t20-b20
	- Fachada para spacer que predefine (top, bottom) com mesmo valor

	Exemplo #1:
		.spacer--md-t80-b80
		@include spacer-vertical($spacer-80, 'md');

*/
@mixin spacer-vertical($value, $breakpoint: '') {

	$map: (top: $value, bottom: $value);

	@include spacer($map, $breakpoint);
}


/*
	spacer-horizontal()
	- Gera classes do tipo spacer--md-r20-l20
	- Fachada para spacer que predefine (right, left) com mesmo valor

	Exemplo #1:
		.spacer--md-r80-l80
		@include spacer-horizontal($spacer-80, 'md');
*/
@mixin spacer-horizontal($value, $breakpoint: '') {

	$map: (right: $value, left: $value);

	@include spacer($map, $breakpoint);
}

.spacer {
    // .spacer--t20
    @include spacer((top: $spacer-20));

    // .spacer--b20
    @include spacer((bottom: $spacer-20));

    // .spacer--b40
    @include spacer((bottom: $spacer-40));
}
